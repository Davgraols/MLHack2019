{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "#import cv2 as cv2\n",
    "import keras\n",
    "# from keras.preprocessing.image.\n",
    "#import cv2\n",
    "from os import listdir\n",
    "#from sklearn.preprocessing import StandardScaler\n",
    "import numpy as np\n",
    "from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
    "\n",
    "from keras.utils import to_categorical\n",
    "from keras.models import save_model\n",
    "\n",
    "import numpy\n",
    "import pandas\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten, Activation, Dropout\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "from keras.utils import np_utils\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.pipeline import Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.applications.mobilenet import preprocess_input\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2230 images belonging to 10 classes.\n",
      "Found 553 images belonging to 10 classes.\n"
     ]
    }
   ],
   "source": [
    "#train_datagen = ImageDataGenerator(rescale=1./255,\n",
    "#    shear_range=0.2,\n",
    "#    zoom_range=0.2,\n",
    "#    horizontal_flip=True,\n",
    "#    validation_split=0.2) # set validation split\n",
    "\n",
    "train_datagen=ImageDataGenerator(validation_split=0.2, \n",
    "    preprocessing_function=preprocess_input) #included in our dependencies\n",
    "\n",
    "train_data_dir = 'Tobacco/train/'\n",
    "#img_height, img_width = 224,224\n",
    "img_height, img_width = 512,768\n",
    "color_mode = 'grayscale' # 'rgb'\n",
    "batch_size = 16\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir,\n",
    "    target_size=(img_height, img_width),\n",
    "    color_mode=color_mode,\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical',\n",
    "    subset='training') # set as training data\n",
    "\n",
    "validation_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir, # same directory as training data\n",
    "    target_size=(img_height, img_width),\n",
    "    color_mode=color_mode,\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical',\n",
    "    subset='validation') # set as validation data\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_4 (Conv2D)            (None, 510, 766, 32)      320       \n",
      "_________________________________________________________________\n",
      "activation_7 (Activation)    (None, 510, 766, 32)      0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_4 (MaxPooling2 (None, 255, 383, 32)      0         \n",
      "_________________________________________________________________\n",
      "conv2d_5 (Conv2D)            (None, 253, 381, 32)      9248      \n",
      "_________________________________________________________________\n",
      "activation_8 (Activation)    (None, 253, 381, 32)      0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_5 (MaxPooling2 (None, 126, 190, 32)      0         \n",
      "_________________________________________________________________\n",
      "conv2d_6 (Conv2D)            (None, 124, 188, 32)      9248      \n",
      "_________________________________________________________________\n",
      "activation_9 (Activation)    (None, 124, 188, 32)      0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_6 (MaxPooling2 (None, 62, 94, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_7 (Conv2D)            (None, 60, 92, 64)        18496     \n",
      "_________________________________________________________________\n",
      "activation_10 (Activation)   (None, 60, 92, 64)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_7 (MaxPooling2 (None, 2, 3, 64)          0         \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 384)               0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 100)               38500     \n",
      "_________________________________________________________________\n",
      "activation_11 (Activation)   (None, 100)               0         \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 100)               0         \n",
      "_________________________________________________________________\n",
      "dense_5 (Dense)              (None, 50)                5050      \n",
      "_________________________________________________________________\n",
      "activation_12 (Activation)   (None, 50)                0         \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 50)                0         \n",
      "_________________________________________________________________\n",
      "dense_6 (Dense)              (None, 10)                510       \n",
      "_________________________________________________________________\n",
      "activation_13 (Activation)   (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 81,372\n",
      "Trainable params: 81,372\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# X = X.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)\n",
    "\n",
    "model = Sequential()\n",
    "# model.add(Conv2D())\n",
    "#model.add(Conv2D(32, (3, 3), input_shape=(3*96, 512, 1)))\n",
    "model.add(Conv2D(32, (3, 3), input_shape=(img_height, img_width, 1)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(32, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(32, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(64, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "#model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(MaxPooling2D(pool_size=(40, 40), strides = (20,20)))\n",
    "\n",
    "# model.add(Conv2D(32, (3, 3)))\n",
    "# model.add(Activation('relu'))\n",
    "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors\n",
    "#model.add(Dense(500))\n",
    "model.add(Dense(100))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.4))\n",
    "\n",
    "model.add(Dense(50))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.3))\n",
    "# model.add(Dense(300))\n",
    "# model.add(Activation('relu'))\n",
    "# model.add(Dropout(0.3))\n",
    "\n",
    "model.add(Dense(10))\n",
    "model.add(Activation('softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "139/139 [==============================] - 34s 243ms/step - loss: 2.1116 - acc: 0.2410 - val_loss: 1.8337 - val_acc: 0.3296\n",
      "Epoch 2/100\n",
      "139/139 [==============================] - 27s 191ms/step - loss: 1.7894 - acc: 0.3566 - val_loss: 1.7127 - val_acc: 0.3836\n",
      "Epoch 3/100\n",
      "139/139 [==============================] - 28s 198ms/step - loss: 1.7042 - acc: 0.3708 - val_loss: 1.5448 - val_acc: 0.4134\n",
      "Epoch 4/100\n",
      "139/139 [==============================] - 27s 192ms/step - loss: 1.6300 - acc: 0.4011 - val_loss: 1.4370 - val_acc: 0.4898\n",
      "Epoch 5/100\n",
      "139/139 [==============================] - 25s 179ms/step - loss: 1.4791 - acc: 0.4652 - val_loss: 1.3407 - val_acc: 0.4898\n",
      "Epoch 6/100\n",
      "139/139 [==============================] - 29s 207ms/step - loss: 1.3840 - acc: 0.5099 - val_loss: 1.2629 - val_acc: 0.5345\n",
      "Epoch 7/100\n",
      "139/139 [==============================] - 27s 198ms/step - loss: 1.2691 - acc: 0.5420 - val_loss: 1.5142 - val_acc: 0.4972\n",
      "Epoch 8/100\n",
      "139/139 [==============================] - 28s 203ms/step - loss: 1.2220 - acc: 0.5561 - val_loss: 1.1328 - val_acc: 0.5940\n",
      "Epoch 9/100\n",
      "139/139 [==============================] - 26s 185ms/step - loss: 1.1329 - acc: 0.6048 - val_loss: 1.1876 - val_acc: 0.5587\n",
      "Epoch 10/100\n",
      "139/139 [==============================] - 25s 178ms/step - loss: 1.0716 - acc: 0.6036 - val_loss: 1.0635 - val_acc: 0.5996\n",
      "Epoch 11/100\n",
      "139/139 [==============================] - 26s 189ms/step - loss: 1.0215 - acc: 0.6460 - val_loss: 1.1787 - val_acc: 0.6034\n",
      "Epoch 12/100\n",
      "139/139 [==============================] - 26s 190ms/step - loss: 1.0144 - acc: 0.6364 - val_loss: 1.0500 - val_acc: 0.6071\n",
      "Epoch 13/100\n",
      "139/139 [==============================] - 26s 191ms/step - loss: 0.9211 - acc: 0.6722 - val_loss: 1.1996 - val_acc: 0.5810\n",
      "Epoch 14/100\n",
      "139/139 [==============================] - 27s 192ms/step - loss: 0.8899 - acc: 0.6776 - val_loss: 1.0985 - val_acc: 0.6071\n",
      "Epoch 15/100\n",
      "139/139 [==============================] - 27s 196ms/step - loss: 0.8413 - acc: 0.7038 - val_loss: 1.0405 - val_acc: 0.6342\n",
      "Epoch 16/100\n",
      "139/139 [==============================] - 27s 193ms/step - loss: 0.7939 - acc: 0.7169 - val_loss: 1.0141 - val_acc: 0.6499\n",
      "Epoch 17/100\n",
      "139/139 [==============================] - 26s 186ms/step - loss: 0.7512 - acc: 0.7311 - val_loss: 1.0730 - val_acc: 0.6406\n",
      "Epoch 18/100\n",
      "139/139 [==============================] - 27s 196ms/step - loss: 0.7280 - acc: 0.7370 - val_loss: 0.9991 - val_acc: 0.6406\n",
      "Epoch 19/100\n",
      "139/139 [==============================] - 25s 181ms/step - loss: 0.6709 - acc: 0.7536 - val_loss: 1.1817 - val_acc: 0.6760\n",
      "Epoch 20/100\n",
      "139/139 [==============================] - 25s 183ms/step - loss: 0.6107 - acc: 0.7863 - val_loss: 0.9780 - val_acc: 0.6667\n",
      "Epoch 21/100\n",
      "139/139 [==============================] - 28s 200ms/step - loss: 0.6091 - acc: 0.7819 - val_loss: 0.9924 - val_acc: 0.7002\n",
      "Epoch 22/100\n",
      "139/139 [==============================] - 28s 198ms/step - loss: 0.5242 - acc: 0.8066 - val_loss: 1.0677 - val_acc: 0.6499\n",
      "Epoch 23/100\n",
      "139/139 [==============================] - 28s 199ms/step - loss: 0.5484 - acc: 0.8050 - val_loss: 1.1466 - val_acc: 0.6443\n",
      "Epoch 24/100\n",
      " 61/139 [============>.................] - ETA: 12s - loss: 0.4649 - acc: 0.8514"
     ]
    }
   ],
   "source": [
    "nb_epochs = 100\n",
    "\n",
    "model.fit_generator(\n",
    "    train_generator,\n",
    "    steps_per_epoch = train_generator.samples // batch_size,\n",
    "    validation_data = validation_generator, \n",
    "    validation_steps = validation_generator.samples // batch_size,\n",
    "    epochs = nb_epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
