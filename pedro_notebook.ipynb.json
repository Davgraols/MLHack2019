{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "#import cv2 as cv2\n",
    "import keras\n",
    "# from keras.preprocessing.image.\n",
    "#import cv2\n",
    "from os import listdir\n",
    "#from sklearn.preprocessing import StandardScaler\n",
    "import numpy as np\n",
    "from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
    "\n",
    "from keras.utils import to_categorical\n",
    "from keras.models import save_model\n",
    "\n",
    "import numpy\n",
    "import pandas\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Conv2D, MaxPooling2D, Flatten, Activation, Dropout\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "from keras.utils import np_utils\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.pipeline import Pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.applications.mobilenet import preprocess_input\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 2230 images belonging to 10 classes.\n",
      "Found 553 images belonging to 10 classes.\n"
     ]
    }
   ],
   "source": [
    "#train_datagen = ImageDataGenerator(rescale=1./255,\n",
    "#    shear_range=0.2,\n",
    "#    zoom_range=0.2,\n",
    "#    horizontal_flip=True,\n",
    "#    validation_split=0.2) # set validation split\n",
    "\n",
    "train_datagen=ImageDataGenerator(validation_split=0.2, \n",
    "    preprocessing_function=preprocess_input) #included in our dependencies\n",
    "\n",
    "train_data_dir = 'Tobacco/train/'\n",
    "#img_height, img_width = 224,224\n",
    "img_height, img_width = 512,768\n",
    "color_mode = 'grayscale' # 'rgb'\n",
    "batch_size = 16\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir,\n",
    "    target_size=(img_height, img_width),\n",
    "    color_mode=color_mode,\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical',\n",
    "    subset='training') # set as training data\n",
    "\n",
    "validation_generator = train_datagen.flow_from_directory(\n",
    "    train_data_dir, # same directory as training data\n",
    "    target_size=(img_height, img_width),\n",
    "    color_mode=color_mode,\n",
    "    batch_size=batch_size,\n",
    "    class_mode='categorical',\n",
    "    subset='validation') # set as validation data\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_4 (Conv2D)            (None, 510, 766, 32)      320       \n",
      "_________________________________________________________________\n",
      "activation_6 (Activation)    (None, 510, 766, 32)      0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_4 (MaxPooling2 (None, 255, 383, 32)      0         \n",
      "_________________________________________________________________\n",
      "conv2d_5 (Conv2D)            (None, 253, 381, 32)      9248      \n",
      "_________________________________________________________________\n",
      "activation_7 (Activation)    (None, 253, 381, 32)      0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_5 (MaxPooling2 (None, 126, 190, 32)      0         \n",
      "_________________________________________________________________\n",
      "conv2d_6 (Conv2D)            (None, 124, 188, 64)      18496     \n",
      "_________________________________________________________________\n",
      "activation_8 (Activation)    (None, 124, 188, 64)      0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_6 (MaxPooling2 (None, 6, 9, 64)          0         \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 3456)              0         \n",
      "_________________________________________________________________\n",
      "dense_3 (Dense)              (None, 50)                172850    \n",
      "_________________________________________________________________\n",
      "activation_9 (Activation)    (None, 50)                0         \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 50)                0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 10)                510       \n",
      "_________________________________________________________________\n",
      "activation_10 (Activation)   (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 201,424\n",
      "Trainable params: 201,424\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# X = X.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)\n",
    "\n",
    "model = Sequential()\n",
    "# model.add(Conv2D())\n",
    "#model.add(Conv2D(32, (3, 3), input_shape=(3*96, 512, 1)))\n",
    "model.add(Conv2D(32, (3, 3), input_shape=(img_height, img_width, 1)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(32, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(64, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "#model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(MaxPooling2D(pool_size=(20, 20)))\n",
    "\n",
    "# model.add(Conv2D(32, (3, 3)))\n",
    "# model.add(Activation('relu'))\n",
    "# model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Flatten())  # this converts our 3D feature maps to 1D feature vectors\n",
    "#model.add(Dense(500))\n",
    "model.add(Dense(50))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.3))\n",
    "\n",
    "# model.add(Dense(400))\n",
    "# model.add(Activation('relu'))\n",
    "# model.add(Dropout(0.3))\n",
    "# model.add(Dense(300))\n",
    "# model.add(Activation('relu'))\n",
    "# model.add(Dropout(0.3))\n",
    "\n",
    "model.add(Dense(10))\n",
    "model.add(Activation('softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "              optimizer='adam',\n",
    "              metrics=['accuracy'])\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "139/139 [==============================] - 81s 583ms/step - loss: 1.8691 - acc: 0.3566 - val_loss: 1.6173 - val_acc: 0.4577\n",
      "Epoch 2/100\n",
      "139/139 [==============================] - 29s 207ms/step - loss: 1.4718 - acc: 0.4883 - val_loss: 1.4549 - val_acc: 0.5233\n",
      "Epoch 3/100\n",
      "139/139 [==============================] - 26s 190ms/step - loss: 1.3028 - acc: 0.5463 - val_loss: 1.3010 - val_acc: 0.5661\n",
      "Epoch 4/100\n",
      "139/139 [==============================] - 29s 210ms/step - loss: 1.1609 - acc: 0.5949 - val_loss: 1.2427 - val_acc: 0.5978\n",
      "Epoch 5/100\n",
      "139/139 [==============================] - 28s 203ms/step - loss: 1.0349 - acc: 0.6412 - val_loss: 1.1581 - val_acc: 0.6052\n",
      "Epoch 6/100\n",
      "139/139 [==============================] - 28s 203ms/step - loss: 0.9355 - acc: 0.6920 - val_loss: 1.0567 - val_acc: 0.6480\n",
      "Epoch 7/100\n",
      "139/139 [==============================] - 31s 222ms/step - loss: 0.8657 - acc: 0.6981 - val_loss: 1.2228 - val_acc: 0.6164\n",
      "Epoch 8/100\n",
      "139/139 [==============================] - 29s 211ms/step - loss: 0.7952 - acc: 0.7179 - val_loss: 1.0476 - val_acc: 0.6667\n",
      "Epoch 9/100\n",
      " 70/139 [==============>...............] - ETA: 10s - loss: 0.7469 - acc: 0.7455"
     ]
    }
   ],
   "source": [
    "nb_epochs = 100\n",
    "\n",
    "model.fit_generator(\n",
    "    train_generator,\n",
    "    steps_per_epoch = train_generator.samples // batch_size,\n",
    "    validation_data = validation_generator, \n",
    "    validation_steps = validation_generator.samples // batch_size,\n",
    "    epochs = nb_epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
